------------------------------------------------------------

This is the explanation of the index.js in my NFT collection.

------------------------------------------------------------

import Head from 'next/head'
import styles from '../styles/Home.module.css'
import Web3Modal from "web3modal";
import { useRef, useState, useEffect } from 'react';
import { Contract, providers, utils } from "ethers";
import { NFT_CONTRACT_ADDRESS, NFT_CONTRACT_ABI } from '../constants'

These are the import statements used in our index.js file.

- Head is used for the HTML part of the index file.
- Web3Modal is a library used for connecting with multiple wallets.
- {useRef, useState, useEffect} are all react hooks.
- ethers is importing three objects used for working with Ethereum.
- constants import are used to help us simplify instantiating our contract.

------------------------------------------------------------

export default function Home() {
  const [walletConnected, setWalletConnected ] = useState(false);
  const [presaleStarted, setPresaleStarted] = useState(false);
  const [presaleEnded, setPresaleEnded] = useState(false);
  const [isOwner, setIsOwner] = useState(false);
  const [numTokensMinted, setNumTokensMinted] = useState("0");
  const [loading, setLoading] = useState(false);
  const web3ModalRef = useRef();


------------------------------------------------------------

- Export default function is used for when you want to export a block of code for
  use in other programs.
- These are a bunch of react hooks used for different purposes.
- useState is used to persistantly keep stateful value. 
  - const [variableValue, setVariableValue] = useState(initial value);
  - const [walletConnected, setWalletConnected] = useState(initially false, since wallet is not connected yet.)
           walletConencted? setValueOfWalletConnected: 
- useRef is used to presist values between renders.
  - web3ModalRef is the wallet connection of the user, we want to keep this 
    connection between page renders (refresh).

------------------------------------------------------------


const getNumMintedTokens = async () => {
  try {
    const provider = await getProviderOrSigner();

    const nftContract = new Contract( 1
      NFT_CONTRACT_ADDRESS,
      NFT_CONTRACT_ABI,
      provider
    )

    const numTokenIds = await nftContract.tokenIds(); 2
    // This will return a BigNumber, so we're converting it to a string
    // So that we can accept the uint256 value.
    setNumTokensMinted(numTokenIds.toString()); 3


  } catch (error) {
    console.error(error)
  }
}

------------------------------------------------------------

Notes on this function:

1. This is instantiating a contract for use in the function.
2. Assigning a variable to a contract promise, and its telling the variable to wait for that promise to return a response before going forward with the function.
3. We're also using a react hook setter function (setNumTokensMinted) and using the number of minted tokens (response from the contract) as an argument to the setter function.
 - Also, JS can't handle a number value as big as an uint256 data type in solidity can so we have to convert it to a string in order for JS to handle it.


------------------------------------------------------------

const presaleMint = async () => {
    setLoading(true); 1.
    try {
      const signer = await getProviderOrSigner(true);

      const nftContract = new Contract ( 2
        NFT_CONTRACT_ADDRESS,
        NFT_CONTRACT_ABI,
        signer
      );
     
      const txn = await nftContract.presaleMint({ 3
        value: utils.parseEther("0.01"), 3.1
      });
      await txn.wait(); 4

      window.alert("You successfully minted a CryptoDev!"); 5

    } catch (error) {
      console.error(error)
      window.alert(error)
    }
    setLoading(false); 6
  }

------------------------------------------------------------

1. This is setting loading (react hook) to true, which will be linked to display 'loading...' when a transaction is processing so that the user knows what's going on.
2. instantiating a contract for use.
3. Assigning a variable (txn) to contract mint call and telling it to wait for it to process before going forward with the function.
  3.1. This is passing in the amount of ether for the transaction.
    - Ethers provides some utility functions for our use, insted of writing out the amount of wei, we just name 'utils.parseEther(ether amount)' and it will convert to
      wei automatically. 
        - Contracts take values in wei, if we were to convert 0.01 ether we would have to convert it to '10000000000000000' in order for the contract
          to use it. 
        - This Ethers Utils function is very nice for eliminating this step.
4. Wait for the transaction to process before proceding.
5. Output a window alert to the user telling them that the transaction went through.
6. Set the loading hook to false, which reverts back to 'presaleMint' or publc mint.

------------------------------------------------------------


const publicMint = async () => {
  setLoading(true);
  try {
    const signer = await getProviderOrSigner(true);

    const nftContract = new Contract (
      NFT_CONTRACT_ADDRESS,
      NFT_CONTRACT_ABI,
      signer
    );
   
    const txn = await nftContract.mint({
      value: utils.parseEther("0.01"),
    });
    await txn.wait();

    window.alert("You successfully minted a CryptoDev!");

  } catch (error) {
    console.error(error)
  }
  setLoading(false);
}

------------------------------------------------------------

This is the same as the explanation above, the only difference is the contract function used.


------------------------------------------------------------

const checkIfPresaleEnded = async () => {
  try {
    const provider = await getProviderOrSigner();

    const nftContract = new Contract (
      NFT_CONTRACT_ADDRESS,
      NFT_CONTRACT_ABI,
      provider
    );
    
    // This will return a BigNumber because presaleEnded is a uint256 data type.
    // This will return a timestamp in seconds.


    const _presaleEnded = await nftContract.presaleEnded(); 1.


    // Date.now in JS returns the time in miliseconds, so we're going to
    // Divide this by 1000 (1000 milliseconds in a second.)
    // Also since we're dividing by 1000 it has the potential to be a float value.


    const currentTimeInSeconds = Date.now() / 1000; 2.


    // We're going use bigNumber since JS can't handle numbers the size of 
    // uint256, so we have to use bigNumbers lt() function instead of JS's
    // (>) comparators.
    // We're going to wrap it in a math.floor to make sure its always an integer.


    const hasPresaleEnded = _presaleEnded.lt( 3.
      Math.floor(currentTimeInSeconds) 3.1
      );
    setPresaleEnded(_presaleEnded); 4.
    

    return hasPresaleEnded; 5.
    
  } catch (error) {
    console.error(error)
    return false; 6..
  }
};

------------------------------------------------------------

1. Assigning a variable to the nft contract function presaleEnded, and telling it to wait for the response before proceding with the contract.
2. Assigning a variable to the current time / 1000.
  - JS runs Epoch time in milliseconds, so since there are 1000 milliseconds in 1 second, we divide by 1000 to convert the current time from milliseconds to seconds.
3. Assigning a variable to the 
    (_presaleEnded) value (presaleEnded = block.timestamp(at presaleStarted) + 5 minutes)
      - _presaleEnded is less than current time in seconds
        - If the presaleEnded time (timestamp + 5 mins) is less than current time
          - THEN _presaleEnded = TRUE.
      - There is a possibility that currentTimeInSeconds returns a float (decimal point number) that JS cannot handle, so we put Math.floor to convert it to an integer which 
      JS can handle.
4. This is using the setter function for the presaleEnded hook, it will input the boolean value of _presaleEnded.
5. Return the boolean value of hasPresaleEnded.
  - If the presale has ended then it will return true.
6. If there is an error, return false.

------------------------------------------------------------

const getOwner = async () => {
  try {
    const signer = await getProviderOrSigner(true);

    const nftContract = new Contract (
      NFT_CONTRACT_ADDRESS,
      NFT_CONTRACT_ABI,
      signer
    );


    const owner = await nftContract.owner(); 1
    // Owner of the contract.
    const userAddress = await signer.getAddress(); 2
    // Address of the user who is currently connected to the dapp.

    if (userAddress.toLowerCase() === owner.toLowerCase()) { 3
      setIsOwner(true);
    }
    
  } catch (error) {
    console.error(error)
  }
}

------------------------------------------------------------


1. Assign the variable 'owner' to the returned contract owner value, wait for it to return the value before proceding.
2. Assign the variable 'userAddress' to the signer's address. (Current user of the dApp).
3. IF the Current user of the contract is the owner of the contract, set the isOwner react hook to true.
  - When the isOwner hook is set to true, it will tell the page to display functions only available to the Collection administrator (owner of the contract).

------------------------------------------------------------


const startPresale = async () => {
  setLoading(true);
  try {
    const signer = await getProviderOrSigner(true);

     const nftContract = new Contract (
      NFT_CONTRACT_ADDRESS,
      NFT_CONTRACT_ABI,
      signer,
    )

    const txn = await nftContract.startPresale(); 1.
    await txn.wait(); 2.

    presaleStarted(true); 3.

    
  } catch (error) {
    console.error(error);
  }
  setLoading(false);
}

------------------------------------------------------------

1. Assign a variable to contract function call (startPresale()) and tell it to wait for the promise to resolve before proceding.
2. Wait for the transaction to process.
3. set the presaleStarted hook to true.
  - This will allow people to perform a presaleMint, and it will also help us to figure out what to display at what time (e.g. presaleMint, or publicMint).



------------------------------------------------------------
  
  
const checkIfPresaleStarted = async () => {
  try {
    const provider = await getProviderOrSigner();

    const nftContract = new Contract (
      NFT_CONTRACT_ADDRESS,
      NFT_CONTRACT_ABI,
      provider
    );


    const _presaleStarted = await nftContract.presaleStarted(); 1.
      // Assigning variable to a boolean value returned from the nft contract.
    
    if(!_presaleStarted) { 2.
      await getOwner();
    }
    
    setPresaleStarted(_presaleStarted); 3.
    // Setting the value of the react hook useState with the returned value from
    // The nft contract.

    return _presaleStarted; 4.
    // Returning the boolean value.
    
  } catch (error) {
    console.error(error);
    return false;
    // If there's an error: return false 
    // - isPresaleStarted(false);
  }


------------------------------------------------------------

1. Assign a variable to the returned contract (boolean) value of presaleStarted.
2. IF the presale is NOT started, call getOwner function.
  - getOwner will:
    - Check if the user is the contract owner, and if so, will return true.
      - if True, then the webpage will display the startPresale function for the owner to start the presale period.
3. Calling the setter function of presaleStarted, and inputing the returned contract variable.
  - setPresaleStarted(true);
4. Return the contract value of presaleStarted.

------------------------------------------------------------

const connectWallet =  async() => {
  try {
    await getProviderOrSigner(); 1.
    setWalletConnected(true); 2.
  } catch (error) {
    console.error(error);
  }

}

------------------------------------------------------------

1. Call getProviderOrSigner.
  - getProviderOrSigner will:
  Open metamask and request for the user to connect their wallet with the dApp.
    Returns the provider object (default, for reading the Blockchain)
      - Assign a variable to the provider object.
      - Make sure that it is connected to Rinkeby.
      - Return the provider object.
    if the signer is needed: (For transactions)
      - Same as above but provide the signer object insted.
2. Set the walletConnected hook to true.
  - Setting this react hook to true will make the webpage display functions like presaleMint(if the address is in the whitelist), or Public mint.

------------------------------------------------------------

const getProviderOrSigner = async (needSigner = false) => { 1. 
    
  const provider = await web3ModalRef.current.connect(); 2.
  // Will pop open metamask and ask the user to connect their wallet.
  const web3Provider = new providers.Web3Provider(provider); 3.
  // This gives us access to the functions that ethers provides
  
  const { chainId } = await web3Provider.getNetwork(); 4.

  if (chainId !== 4) { 5.
    window.alert("Please change your network to Rinkeby");
    throw new Error("Incorrect Network");
  } 

  if (needSigner) { 6.
    const signer = web3Provider.getSigner();
    return signer;
  }
  return web3Provider; 7.
  };

------------------------------------------------------------

1. Async function declaration - with a parameter (needSigner) that will default to false if no argument is given with function call.
2. NOTE: This is the default route that the function will take, it will return a provider object if there is no argument given.
  - Assigning a variable to the web3ModalRef wallet connection function, and waiting for it to return an object before proceding. 
    - This function will open the wallet provider (e.g. metamask.), and request that the user connect their wallet to the dApp.
    - web3Modal is a simple library that allows devs to connect to multiple wallet providers.
3. This is assigning a variable to a new web3Provider which uses the above provider object as a argument, and waits for the response before proceding.
  - Assigning this variable gives us access to ethers functionality that we'll use.
4. Assigning a variable to the provider's current network.
5. If the network isn't connected to rinkeby (4) throw an error and a window alert telling the user to change the network.
6. If the needSigner parameter is given the argument of 'true', then return the signer object.
  - This is used for signing transactions.
7. If (needSigner = false) it defaults to - Return the provider. 

------------------------------------------------------------

const onPageLoad = async () => {
  await connectWallet(); 1.
  await getOwner(); 2.
  const presaleStarted = await checkIfPresaleStarted(); 3.
  if (presaleStarted) { 4
    await checkIfPresaleEnded(); 
  }
  // The reason for the if statement is that all integers in solidity are given the initial value of 0.
  // In this case presaleEnded is an integer, until the presale starts, it will have the value of 0.
  // In our checkIfPresaleEnded function our less than number logic will always equal 
  // True since an unsigned integer is always bigger than zero.

  await getNumMintedTokens(); 5.
        
  // Track in real time the number of minted tokens.
  // setInterval is a function in JS that helps us to check something
  // everytime a time interval passes.

  setInterval(async() => { 6.
    await getNumMintedTokens();
  }, 5 * 1000);

  // Also keep in mind, JS time is in milliseconds, so we have to multiply

  // 5 * 1000 to get 5 second interval time.

  // Track in real time the status of the presale (started, ended)


  setInterval(async() => { 7
    const presaleStarted = await checkIfPresaleStarted();
    if(presaleStarted) {
      await checkIfPresaleEnded();
    }
  }, 5 * 100);

}

------------------------------------------------------------

0. When the page loads perform the following:
1. Call the connectWallet() function.
  - connectWallet() gets the provider/signer, and sets the walletConnected hook to true.
2. Call the getOwner() function.
  - getOwner gets the address of the contract owner, and the current users address and checks if its the same address, if so, it changes what is accessable to the user.
3. Assigning a variable (presaleStarted) to checkIfPresaleStarted(), and wait for it to respond before you procede.
  - checkIfPresaleStarted() calls the contract and asks if the presale has started, if its true, then it sets the presaleStarted hook to true (which then displays presaleMint to
  whitelisted users.)
4. If the presale has started, then check if presale has ended, wait for the response.
    - checkIfPresaleEnded calls the contract for the presale End time and it checks it agains current time, then returns the value and sets the hook (which then displays public 
    mint after the presale period has ended.)
    - Another thing to note is why we have an If statement here: check this out \/
        The reason for the if statement is that all integers in solidity are given the initial value of 0.
        In this case presaleEnded is an integer, until the presale starts, it will have the value of 0.
        In our checkIfPresaleEnded function our less than number logic will always equal 
        True since an unsigned integer is always bigger than zero.
          - If we didn't put this in an if statement, then the presale period would never happen because the current time will always be bigger than zero, which essentially
          skips the persale period.
5. Call getNumMintedTokens() function
      - This calls the contract and asks for the number of already minted tokens, then it updates the mintedTokens hook with the contract value.
6. Everytime 5 seconds passes, check to see how many tokens have been minted, (and update the hook to display the value on the page.)
      - setInterval is a JS function that helps us check something everytime a period of time passes. 
      - We also have to convert JS time (milliseconds) to seconds for our time interval.
7. Everytime 5 seconds passes, check if presale has started, and if true, check if presale has ended.
      - Everytime we check presaleStarted and presaleEnded we also update the react hooks that will display different functions depending on the value(presaleMint if whitelisted,
       etc.)

------------------------------------------------------------

useEffect(() => { 1.
  if(!walletConnected) { // If walletConnected = false, run this code. 2.
    web3ModalRef.current = new Web3Modal({ 
      network: "rinkeby",
      providerOptions: {},
      disableInjectedProvider: false,
    }); // This line is creating a new instance of the Web3modal library and giving it arguments to do so.
    onPageLoad(); 4.
  }
}, []) // This will run every time the page loads. 5.

------------------------------------------------------------

1. useEffect hook allows us to perform side effects on our components.
  - useEffect takes two arguments:
    (<function>, <dependency>)
      - useEffect runs on every render, unless you include the dependency (dependency is the value/function that has to change in order for useEffect to run, an
      empty dependency will default to only running on the first render.)
        - Since this is providing a connection to the wallet, we don't want the user to have to connect their wallet everytime they load the page.
2. If the wallet is not connected, run this code.
        - This whole line is creating a new instance of the Web3modal library and giving it the arguments to do so.
          - providerOptions is optional, we have to leave an empty bracket though.
          - disableInjectedProvider: false - this line gives us the option to disable injected providers (like metamask), but we set it to false since we want injected
            providers to run for us.
4. run the onPageLoad function.
        - Which is checking:
          - walletConnected.
          - isOwner.
          - isPresaleStarted.
            - isPresaleEnded.
          - getNumMintedTokens.
          - Check getNumMintedTokens every 5 seconds.
          - Check presaleStarted + presaleEnded every 5 seconds.

------------------------------------------------------------


function renderBody() { 
  if (!walletConnected) {
    return (
      <button onClick={connectWallet} className={styles.button}>
      Connect your wallet
      </button>
    );
  }

1. Function declaration, if wallet is not connected, display connectWallet to the user.


  if (loading) {
    return <button className={styles.button}>Loading...</button>;
  }


2. If the loading hook is equal to true, display 'Loading...' to the user.


  if(isOwner && !presaleStarted) {
    // Render a button to start the presale.
    return (
      <button className={styles.button} onClick={startPresale}>
        Start Presale!
      </button>
    );
  }


3. If isOwner is true AND Presale has NOT started, display a button to the contract owner for starting the presale.



  if(!presaleStarted) {
    // Just say that the presale has not started yet, come back later.
  return (
    <div>
      <div className={styles.description}>
        Presale has not started yet, come back later!
      </div>
    </div>
  );
}
  
4. If presale has not started, (if the user is not the owner, then it will default to here) display 'Presale has not started yet, come back later!' to the user.


  if(presaleStarted && !presaleEnded) {
    // Allow whitelisted addresses to mint tokens.
    // Need to be in whitelist to work.
    return (
      <div>
        <div className={styles.description}>
          Presale has started! If your address is whitelisted, you can mint a 
          Crypto Dev 🥳
        </div>
        <button className={styles.button} onClick={presaleMint}>
          Presale Mint 🚀
        </button>
      </div>
    );
  }

5. If presale has started and the presale has not ended yet, display this message and the presale mint to the user.

  if(presaleStarted && presaleEnded) {
    // Render a button to mint the tokens.
    return (
        <button className={styles.button} onClick={publicMint}>
          Public Mint
        </button>
    );
  }
}

6. If presale has started and it has ended, dispaly this public mint for the public sale.


------------------------------------------------------------
