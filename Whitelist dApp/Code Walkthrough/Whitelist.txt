--------------------------------------------------------------------

Code Walkthrough of the Whitelist contract in this Whitelist project.

--------------------------------------------------------------------


uint8 public maxWhitelistedAddresses;
    - State variable for the maximum number of addresses that can
        be whitelisted.
    - uint8 is used to reduce storage amount which reduces contract deployment cost 
        since the number dosen't need to be huge.
    - uint8 in solidity's initial value is zero so it dosen't need to be initialized.
  

uint8 public numAddressesWhitelisted;
    - Current number of addresses whitelisted.
    - 

mapping(address => bool) public whitelistedAddresses;
    - Key value data structure tracking: address and if its whitelisted or not.
    - Mappings are faster than arrays, and they have O1 time complexity.
    - Where an array's time complexity is O(n).
        - O(n) means that the time it takes to read every entry is purportional to
            the number of items stored in the data structure.
        - The issue is that with an array, you need to loop through the array to get
            the value that you want, which is why it has a O(n) complexity.
        - Comparitively, when trying to get a value from a mapping, you can
            index the mapping directly, going to the value directly instead, saving 
            time.






constructor(uint8 _maxWhitelistedAddresses) {
    maxWhitelistedAddresses = _maxWhitelistedAddresses;
}
    - constructor function that is setting the maximum number of whitelisted
        addresses.




