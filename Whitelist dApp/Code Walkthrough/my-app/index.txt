--------------------------------------------------------------------

Code walkthrough of the index.js script in this Whitelist Dapp - 
Application side. 

--------------------------------------------------------------------

Main Structure of the index.js file:

-------------------------------

import statements
Main Home function declaration {
    react hook initializations
    getProviderOrSigner()
    addAddressToWhitelist()
    checkIfAddressIsWhitelisted()
    getNumberOfWhitelisted()
    renderButton()
    connectWallet()
    useEffect()
        - !walletConnected
    HTML main formatting
}


--------------------------------------------------------------------

In this page we're going to use the React.js library and React Hooks in this page.

React Hooks is one of the main things we'll be using in this file.

--------------------------------------------------------------------

Import statements

--------------------------------------------------------------------

import Head from "next/head";

import styles from "../styles/Home.module.css";
'
- These are all import statements for specific depenedencies that we're going to be 
    using.
import Head from next/head;
    - This is importing the Head component from the next.js library.
    - the Head is a component that allows us to append elements to the head of the 
        page.
'import styles from "../styles/Home.module.css";'
    - This is importing the CSS styling from this file.

import { useEffect, useState, useRef} from "react"; 
    - This is deconstructing react and importing just these three hooks for our use.
        - useEffect allows us to perform side effects in yourt components.
            - Examples include, fetching data, directly updating the DOM, and timers.
            - useEffect takes two arguments, the second is optional.
        - useState allows us to track state in a function component.
            - State generally refers to the data or properities that need to be tracking in
            an application.
        - useRef - this hook allows us to persist values between renders.
            - It can also be used to store a mutable value that does not cause a re-render
                when updated.
            - It can be used to access a DOM element directly.
import Web3Modal from "web3modal"; 
    - This is importing web3modal which is a library that is a single Web3 / Ethereum provider 
        solution for all Wallets.
            - Web3Modal is a library to help developers add support for multiple providers
                in their apps in a single customizable configuration.
import { Contract, providers } from "ethers";
    - This is deconstructing Ethers and importing these two components for use
        - Contract functionality helps us create instances of the Contract for use
            in our application.
        - providers in ethers.js is a read-only abstraction to access blockchain data.
            - This helps us read data from the blockchain without paying for gas.
                - Such as getting the numOfAddressesWhitelisted and displaying that on the 
                    webpage.
import { WHITELIST_CONTRACT_ADDRESS, abi } from "../constants";
    - This is importing the Whitelist Address and the contract ABI.
        - These are assigned to variables in another file to make the index.js file
            easier to read and understand.
            - Contract address will be used as an input for contract instances.
            - abi will also be used as an argument for contract instances.

-----------------------------------------------------------------------------------


Main Exportable function and React Hooks

-----------------------------------------------------------------------------------
export default function Home() {
    - The export statement is used when creating JS modules to export objects, 
        functions, variables from the module so they can be used by other programs
        with the help of import statements.
    - There are two types of exports, Named Exports and Default Exports.
        - Named Exports are useful to export several values.
            - During import it is mandatory to use the same name of the 
                corresponding object.
        - Default Export are useful to export only a single object, function
            variable. During the import we can use any name to import.
    - In this case we're only exporting a single function, so its a default export 
        in this instance.   

const [walletConntected, setWalletConnected] = useState(false);
    - This is a react component that helps us to track a state of a function
        component, in this instance this data is a boolean value if the wallet is connected
            or not.
    - This is initializing the data value of walletConnected to an iniital value of 'false'
    - walletConnected is a boolean value if the wallet is connected or not.
    - setWalletConnected is a function that allows us to set the function.
    - Both 'walletConntected' and 'setWalletConnected' are variables that are set by the 
        developer at initialization.
    - The structure of a react hook:
        const [valueVariable, valueSetFunction] = useState(value);

const [numOfWhitelisted, setNumOfWhitelisted] = useState(0);
    - This is a react hook that allows us to track the state (data or value) of a function component.
        - In this instance, the value is initialized at 0.
            - or ZERO people are whitelisted.
    - numOfWhitelisted is the integer value of how many addresses are whitelisted.
    - setNumOfWhitelisted is the function that allows us to update the number of people whitelisted.
    - The initial value (initialization) is set to 0.
        - ZERO people are whitelisted.

const [joinedWhitelist, setJoinedWhitelist] = useState(false);
    - This is a react hook that allows us to track the state (data or value) of a function component.
        - In this instance, a boolean value if the msg.sender (address of the dApp user) is 
            whitelisted or not.
    - joinedWhitelist - boolean value if the user is whitelisted or not.
    - setJointedWhitelist - A function to update the value (from false to true) after
         the user has joined the whitelist.
    - The initial value (initialization) is set to false
        - The current address is not whitelisted.

const [loading, setLoading] = useState(false);
    - This is a react hook that allows us to track the state (data or value) of a function component.
        - In this instance the boolean value which is initialzied to false
            - It will default to a false state
                - It is not loading.
        - loading - boolean value if the transaction is processing or not.
        - setLoading - A function to update the value (from false to true) 
            whenever the transaction is being processed (mined) which we'll call loading.
        - The intial value (initializaton) is set to false.
            - The default state will be not loading.


-------------------------------------------------------------------------------------------

Functions and Main Function:

-------------------------------------------------------------------------------------------

const getProviderOrSigner = async(needSigner = false) // 6 => { // 1
    try {
        const provider = await web3ModalRef.current.connect(); // 2
        // This current.connect from web3Modal returns the provider.
        const web3Provider = new providers.Web3Provider(provider); // 3

        const {chainId} = await web3Provider.getNetwork(); // 4
        if(chainId !== 4) { // 5
            window.alert("Change the network to Rinkeby"); // 5
            throw new Error("Change the network to Rinkeby"); // 5 
        }
        if(needSigner) { // 6
            const signer = web3Provider.getSigner(); // 6
            return signer; // 7
        }
        return web3Provider; // 8
    } catch(err) {
        console.error(err);
    }
}

-----------------------------------------------------------------------------------------------

    getProviderOrSigner Function overview:
        1. Async function declaration.
            - Note 6 next to the parameter of signer = false, 
                - This parameter gives the caller the ability to get the signer from
                    the provider if the transaction needs a signer.
        2. Creating a new provider instance. (connecting with metamask.)
        3. Wrapping a provider in a Web3Provider class (from Web3Modal)
            - Which gives us a multiple functions, one of which is:
                - '.getNetwork' that allows us to get the 
                        network id.
        4. Getting the network ID from the provider.
        5. Checking to see if its on Rinkeby.
            - If the network is not connected to Rinkeby
                - Throw an error prompting the user to change the network.
        6. If the transaction needs a signer, (if the caller sets the needSigner value to true.) 
            get the signer from the provider. 
        7. Return signer.
        8. Return web3Provider.
        9. Catch/log any errors.

---------

Notes on this function:
    - Providers are for read-only transactions, which don't cost anything.
    - Signers are required for writing to the state transactions, which do cost Eth.
    - It will return the provider if you don't input any parameters.
    - If you set the parameter to true it will return the signer.

-----------------------------------------------------------------------------------------------   

    const addAddressToWhitelist = async () => { // 1
        try { // 2
            const signer = await getProviderOrSigner(true); // 3
            
            const whitelistContract = new Contract ( // 4
                WHITELIST_CONTRACT_ADDRESS,
                abi,
                signer
            );
    
            const tx = await whitelistContract.addAddressToWhitelist(); // 5
    
            setLoading(true); // 6
            await tx.wait(); 6.1
            setLoading(false); 6.2
            await getNumberOfWhitelisted(); 6.3
            setJoinedWhitelist(true); 6.4
            
    
    
        } catch(err) { // 7
            console.error(err)
        }
    }
   
-----------------------------------------------------------------------------------------------
   
 addAddressToWhitelist function overview:

1. Naming of the async function 'addAddressToWhitelist'
2. Try this code in the block.
3. Assigning a name to the returned signer object.
4. Create a new instance of the whitelistContract.
    - Pass in the Contract address, contract ABI, and the signer as arguments.
5. Wait for the transaction to process (mine).
6. 
    While transaction is processing:
        6.1 - set the state of the loading hook to true. 
            - This will then tell the render button to display 'loading...' on the button on the
                dApp.
        6.2 - Wait for the transaction to mine.
        6.3 - wait for getNumberOfWhitelisted
                - getNumberOfWhitelisted will get the updated number of people whitelisted.
        6.4 - Update the joinedWhitelist react hook from false to true.
7. If there is an error in above code:
    - catch the error, and print the error in the console.

-----------------------------------------------------------------------------------------------

Notes on this function:
    - at 3. in Ethers.js signer returns an object which is a wrapper around the
        ethereum API signer is an extenstion of provider where it includes the APIs required
            to sign transactions with a private key, whereas provider is only for reading
            from the blockchain not writing to it.
        - An Object in Object-oriented programming (OOP), is an abstract data type created by
            a developer.
                - It can include multiple properties and methods and may even contain other
                    objects.
                - In most programming languages objects are defined as classes.
        - So in this instance, when we are assigning the variable 'signer' to an
            ethers object that wraps an ethereum API with the extenstion of a provider called 'signer'
            so that it can read and write.

-----------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------

const checkIfAddressIsWhitelisted = async() => { // 1 
    try { // 2

        const signer = getProviderOrSigner(true); // 3
        // This is returning the signer instead of the provider. 
        const whitelistContract = new Contract ( // 4 
            WHITELIST_CONTRACT_ADDRESS,
            abi,
            signer
        );
        const address = await signer.getAddress(); // 5
        const _joinedWhitelist = await whitelistContract.whitelistedAddresses( // 6
            address
        );
        setJoinedWhitelist(_joinedWhitelist); // 7

    } catch(err) {
        console.error(err);
    }
}

-----------------------------------------------------------------------------------------

Overview:

1. Async function declaration.
2. Try the code in this block.
3. Assigning the variable signer to the value returned by 'getProviderOrSigner' function
    call with the (true) parameter.
        - This will return the address of the signer.
4. Declaring a new variable 'whitelistContract' and assigning it to a new Contract
    instance from ethers.
        - With the new instance from ethers, we're inputing the
            contract address,
            contract abi,
            and the signer,
5. Assigning 'address' to the signer address.
6. This is assigning a local variable assigned to a boolean value.
    - whitelistedAddresses is a public mapping on the whitelist contract. 
    - Whenever you call the whitelistedAddresses mapping and input the 
        address it returns a boolean value if the contract is in the mapping or not.
7. This is calling the react hook below:
    - const [_joinedWhitelist, setJoinedWhitelist] = setState(false);
    It's calling the hook with the boolean value if the address is in the whitelistedAddresses
        mapping, and it is entering that value.

         A little confused about the logic of this. 
            
         const [_joinedWhitelist, setJoinedWhitelist] = setState(false); // 2

         
         const _joinedWhitelist = await whitelistContract.whitelistedAddresses(
            address // 1
        );
         

        So if we input the address in 1, and it returns false, then when we input it to the state,
        how can we ever change the boolean value of the _joinedWhitelist


--------------------------------------------------------------------------------

const getNumberOfWhitelisted = async() => { 
    try {

        const provider = await getProviderOrSigner(); // 1


        const whitelistContract = new Contract ( // 2
            WHITELIST_CONTRACT_ADDRESS,
            abi,
            provider
        );

        const _numberOfWhitelisted = await whitelistContract.numOfWhitelisted(); // 3
        setNumOfWhitelisted(_numberOfWhitelisted); // 4


    } catch(err) {
        console.error(err);
    }
}




--------------------------------------------------------------------------------

Overview of getNumberOfWhitelisted function:

1. Assigning a variable to the provider for creating an instance of the contract in step 2.
2. Creating an instance of the contract, and inputing a provider instead of a signer,
    - inputing a provider is telling ethers that it will be a read-only transaction.
3. Assigning a local variable to the value returned from the contract about how many 
    addresses are whitelisted.
4. This is calling the function below.
    const [numOfWhitelisted, setNumOfWhitelisted] = useState(0);
    - This will set and hold the value of whitelisted addresses in the state of the page.

--------------------------------------------------------------------------------


const renderButton = () => {  1
    if(walletConnected) {  2
        if (joinedWhitelist) {  3
            return (
                <div className={styles.description}>
                    Thanks for joining the whitelist. 
                </div>
            );
        } else if (loading) { 4
            return <button className = {styles.button}>Loading...</button>;
        } else { 5
            return (
                <button onClick={addAddressToWhitelist} className = {styles.button}>
                    Join the Whitelist
                </button>
            );
        }
    } else { 6
        return (
        <button onClick={connectWallet} className = {styles.button}>
            Connect your Wallet
        </button>
        );
    }
}

--------------------------------------------------------------------------------

Logic overview:

1. Function declaration.
    2. If walletConnected (If the wallet is connected.)
        3. if msg.sender (address of the user) is already in the whitelist:
            - display 'Thanks for joining the whitelist' on the dApp page.
        4. else if  (if the wallet is connected, but not in the whitelist, 
            and the user approved the transaction do this: )
                - the transaction is processing, 
                    display 'Loading...' on the button.
        5. else: (revert to this if the none of the above are true.)
            display 'Join The Whitelist' on the button.
    6. else (revert to this if the wallet isn't connected.)
        display 'connect your wallet' on the button.


------------------------------------------------------------------------------------------
MAIN FUNCTION:
----------------
const connectWallet = async() => { // 1
    try { // 2
        await getProviderOrSigner(); // 3
        setWalletConnected(true) // 4
        checkIfAddressIsWhitelisted(); // 5
        getNumberOfWhitelisted(); // 6
    } catch(err) { // 7
        console.error(err) // 8
    }
}
---------------------------------------------------------------------------------------------
 
Function overview:

1. async function declaration.
2. Try this code (This is a part of JS's Try catch finally statements).
3. Function call: call the getProviderOrSigner function (Wallet) and wait for it to complete before
    moving on.
4. Function Call: change the boolean value of setWalletConnected from false to true. 
    (not connected to connected.)
5. Function Call: Check if the address associated with the wallet is on the whitelist.
6. Function call: Get the value of addresses whitelisted.
7. Catch/log any errors.

---------

try... catch.
    - The try/catch are statements from JS's Try Catch Finally statements.
        - Basically it means try the following code, if there is an error, it will catch 
            the error and print the error.
await getProviderOrSigner
    - This is calling the function getProviderOrSigner.
        - Which is:
            1. Creating a new provider instance. (connecting with metamask.)
            2. Wrapping a provider in a Web3Provider class (from Web3Modal)
                - Which gives us a function '.getNetwork' that allows us to get the 
                    network id.
            3. Getting the network ID from the provider.
            4. Checking to see if its on Rinkeby.
                - If the network is not connected to Rinkeby
                    - Throw an error prompting the user to change the network.
            5. If the transaction needs a signer, get the signer from the provider.
            6. Return signer.
            7. Return web3Provider.
            8. Catch/log any errors.

setWalletConnected
    - This is the modify value function from the above code 
        const [walletConnected, setWalletConnected] = useState(false);
        - When this connectWallet function is called, it will attempt to change the value of this   
        useState hook, if it is sucessful, it will set the value to True


-------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------
        
const [walletConnected, setWalletConnected] = useState(false); // 1

const web3ModalRef = useRef(); // 2

useEffect(() => { // 3
    if (!walletConnected) {{ // 4
        web3ModalRef.current = new web3Modal({ // 5
            network: "rinkeby", // 6
            providerOptions: {}, // 7
            disabledInjectedProvider: false, // 8
        });
        connectWallet(); // 9
    }}
}) [walletConnected] // 3

------------------------------------------------------------------------------------    

Overview:

1. initial value of walletConnect set to false.

2. variable name assigning - connect to the wallet once, and stay connected 
    - (once for every page initialization.)

3. Run everytime a new wallet is connected.

4. If a wallet is connected, run this code.

5. Assigning a variable name to a new instance of the web3Modal.

6. Set the network of the instance to rinkeby.

7. Input any provider options (left blank).

8. Allow injected providers (wallets).

9. Call connectWallet function.


const [walletConnected, setWalletConnected] = useState(false);
    - This line is initializing the state of the page.
        - Initializing meaning setting the initial state.
    - 'walletConnected, setWalletConnected' are variables that you can set.
        - 'walletConnected' is the variable assigned to the value.
        - 'setWalletConnected' is the function that is used to update the value.
    -'useState(false)' 
        - This is setting the state of the variable to a boolean value of 'false'.
All of this is important for understanding the code below.
    This code means: is the wallet connected? true or false. Initial state is false. 

useEffect(() => {

    - useEffect is a react.js hook that allows you to set side effects in your components
        - Like fetching data, updating a dom etc.
    - useEffect takes two arguments: useEffect(<function> <dependency>).
        useEffect runs on every render unless you:
            1. write an empty array "[]" (dependency), which is effectively telling
                useEffect that it can only run once.
                    - Everytime the dependency changes, it will run, but since  
                        there is an empty array, the logic says that it will only run once and
                        never run again.
            2. write a dependency that has to change in order for it to run again.
                - For example: if a function is called, then useEffect runs again.
                    or if a variable assigned to a numerical value changes, the useEffect hook
                        runs once for every value change.
        - So in this case, useEffect will only run for everytime the value of 'walletConnected'
            changes. 
                - So if it changes from false to true, than the useEffect hook will run, running
                all the code in the function.

if (!walletConnected) {{
    - if the wallet is not connected, run this code.
    const web3ModalRef = useRef();
    - This is assigning the variable web3ModalRef to the react hook useRef.
        - useRef with react is used to persist values between renders.
        - This is essentially commanding it to only render once and keep the data.
                - Similar to keeping mutable values persistant in an instance of a class.
            - Which in this case is the MetaMask wallet being connected, it will persist 
                between page renders.
                    - We'll only connect once during the component intialization (page rendering).
    web3ModalRef.current = new web3Modal({  
    - Web3 Modal is an easy to use library for connecting to multiple wallets.
        - With this variable declaration, we're saying that the web3ModalRef.current's value
            is a new instance of the web3Modal.
    network: "rinkeby",
        - Initialization value for web3Modal instance, set to Rinkeby network.
    providerOptions: {},
        - Initializiation value for providerOptions, left blank.
    disabledInjectedProvider: false,
        - Initialization value for disabledInjectedProvider, set to false.
            - False value for this is enabling injected providers (wallets.)

    connectWallet()
        - This is calling the main function
            - After everytime a wallet it connected, it will create a new contract instantiation
                then it will call this function, which goes through the main logic of the dApp.
    [walletConnected] 
        - This is a dependency argument for the useEffect react hook, 
            the code under the useEffect will not run unless the state of walletConnected
                (true or false) changes, then this code will run.

------------------------------------------------------------------------------------------


