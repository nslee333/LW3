These are my notes about the Exchange.sol contract.

This exchange is a working version of the Uniswap V1 AMM model.

At the core of the Uniswap V1 AMM model, there is the x*y=k formula.

This formula helps calculate how much of one token will be received for another token.

x*y=k

Let's say that x stands for ether, and y stands for bitcoin, when both are multiplied, you get K which is a constant product.

No matter how much ether and bitcoin are exchanged, the formula constant K will still equal the same amount regardless of which reserve gets depleted more.

Let's put that into a formula.

(X + XΔ) * (Y - YΔ) = K

Where Δ stands for change in reserve amounts after a swap, the formula will always equal the contant K.

If we were to create a function that would calculate the value of a bitcoin to ether swap, we would manipulate the formula a bit (solve for x) to help calculate the value automatically.

YΔ = (Y * XΔ) / (X + XΔ) // Everything makes sense except for the Y * XΔ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

This will all come in handy understanding the Exchange.sol contract.

--------------------------------------------------------------------------------------------------------------------------------------------------

contract Exchange is ERC20 {

    
    address public cryptoDevTokenAddress; 1.
    

    constructor(address _cryptoDevToken) ERC20 ("CryptoDev LP Token", "CDLP") { 2
        require(_cryptoDevToken != address(0), "Token address passed is a null address");
        cryptoDevTokenAddress = _cryptoDevToken; 
    }

    function getReserve() public view returns (uint) { 3
        return ERC20(cryptoDevTokenAddress).balanceOf(address(this)); // Goes to the mapping in the CryptoDevToken contract, and gets how much tokens this address owns.
    }
------------------------------------------------------------------------------------------------------------------------------------------------

1. This is the a state variable for the Token Address that we will be our second token which we will exchange for ether.
2. This constructor is taking in.
    1. The address of the CDT contract, as an argument, and also initializing the ERC20 contract's constructor with The name of the token and the symbol of the token.
        - The constructor is requiring that the address provided is not a null address, and throws an error if it is null.
        - It Initializes the state variable 'cryptoDevTokenAddress' with the constuctor argument passed in at deployment. 
3. This function is used to get the Total Supply of CDT tokens that the exchange owns.
    - Specifically it calls the CDT contract's 'balanceOf' function which is declared in the OZ ERC20 contract.
        - balanceOf goes to the OZ ERC20 contract, then goes to an internal mapping, and grabs the balance of the address and returns it to the function that called it.
        - Gets the balance of CDTs that exchange owns, and returns the value to the getReserve function call.
    - The 'ERC20(cryptoDevTokenAddress)' is creating an instance of the contract for our use in our contract without creating an interface.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function addLiquidity(uint _amount) public payable returns (uint) { 1
    uint liquidity; 
    uint ethBalance = address(this).balance;
    uint cryptoDevTokenReserve = getReserve();
    ERC20 cryptoDevToken = ERC20(cryptoDevTokenAddress); 
    
    if(cryptoDevTokenReserve == 0) {

        cryptoDevToken.transferFrom(msg.sender, address(this), _amount);

        liquidity = ethBalance;
        _mint(msg.sender, liquidity);
    
    } else {
        uint ethReserve = ethBalance - msg.value;

        uint cryptoDevTokenAmount = (msg.value * cryptoDevTokenReserve)/(ethReserve); // Come back to this later. 
        require(_amount >= cryptoDevTokenAmount, "Amount Of tokens sent is less than the minimum tokens required."); 
        cryptoDevToken.transferFrom(msg.sender, address(this), cryptoDevTokenAmount);
        liquidity = (totalSupply() * msg.value) / ethReserve;
        _mint(msg.sender, liquidity);
    } 
    return liquidity;
}

------------------------------------------------------------------------------------------------------------------------------------------------

This function is used to add liquidity to the exchange.

It takes in a _amount as an argument, and it has a conditional that checks if there is any CDTs in exchange's reserves. 
    1. If CDT reserves are zero, then it transfers the CDTs from the liquidity provider's address to the exchange, according to the amount argument. With no requirements.
        - Then it mints the Liquidity Provider Tokens to the User. 
        - Set the liquidity to the ethBalance.
        - This is the initialization of the exchange, the first user sets the price, all liquidity added afterwards must follow the same ratio set by the initialization.
    2. Else, Check and make sure that the ether provided is correct (according to the ratio) 
        - then transfer the CDTs from the LP's address to the exchange, along with the Ether sent to the exchange contract.
        - Then according to the ratio, mint the proper LP tokens to the Liquidity Provider's address.
        - Then calculate the updated liquidity value and assign it to the liquidity.
    3. Return the value of liquidity.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- The initialization of the 'ERC20 cryptoDevToken = ERC20(cryptoDevTokenAddress);'
    - This is creating an instance of the CDT contract, and assigning it to our variable so we can use it for calling functions.
    - ERC20 (dataType) cryptoDevToken (variable).

- If the CDT reserves are zero, meaning that the exchange hasn't been intialized yet.
    - Then Transfer the CDT tokens that the LP has to the exchange reserves.
    - Liquidity's value is set to the Eth balance of the contract.
    - Then mint the LP tokens to the LP address.
        - The amount of LP tokens to be minted is equal to the Eth balance since this is the initialization of exchange.
- ELSE
    - Assign ethReserve to ethBalance - msg.value.
        - This is because the ethBalance already has the msg.value in it, so we need to subtract it out to get a proper reserve amount.
    - uint cryptoDevTokenAmount = ((ether sent) * cryptoDevTokenReserve)/ethReserve, this is following the x*y=k formula.
            yDelta = (xDelta * YReserve) / XReserve.
    - Require that the CDT tokens sent to the contract is greater than or equal to the Calculated minimum according to the ratio. 
    - Transfer the amount from the msg.sender to the exchange address, amount is the cryptoDevTokenAmount.
    - Liquidity = (totalSupply() * msg.value) / ethReserve, this is following the x*y=k formula.
        yDelta = (totalSupply(LP Tokens) * xDelta)/X, this is following the x*y=k formula. 
    - Then mint the amount of LP tokens to the LP's address with the amount being calculated right above.
Return liquidity; 
    - I have no idea why this is here.

-----------------------------------------------------------------------------------------------

function removeLiquidity(uint _amount) public returns (uint, uint) { // _amount if LP tokens.
    require(_amount > 0, "_amount should be greater than 0");
    uint ethReserve = address(this).balance;
    uint _totalSupply = totalSupply();

    uint ethAmount = (ethReserve * _amount)/ _totalSupply; // Total supply of ether.

    uint cryptoDevTokenAmount = (getReserve() * _amount)/ _totalSupply; // What the amount is multiplied by dosen't matter, since the ratio is one to one.

    _burn(msg.sender, _amount); // burn LP tokens.
    payable(msg.sender).transfer(ethAmount); // Transfer the amount of ether to the user.
    ERC20(cryptoDevTokenAddress).transfer(msg.sender, cryptoDevTokenAmount); // Transfer the amount of CDTs to the user.
    return (ethAmount, cryptoDevTokenAmount); // Return the amount numbers (For display? WHY?)
} 

------------------------------------------------------------------------------------------------

This function is used to remove the liquidity, 
    - the idea is that you turn in your LP tokens and the exchange will send you your ether and CDTs back.
    - The exchange will also burn the LP tokens that you burned.

This function takes in an uint _amount (The user's LP tokens) then it will return two uints (Your Ether and CDTs).
    - Requires that the amount is more than zero.
    - Creating instances of ethReserve and the totalSupply (LP tokens).
    - The uint ethAmount to be returned to the user.
        - ethReserve * _amount(LP tokens) / totalSupply (ALL LP tokens)
    - the uint cryptoDevTokenAmount to be returned to the user.
    - It will _burn the LP tokens sent to the function. 
        - (sent to the address(0)).
    - Then it will transfer the Ether, and the CDT tokens to the user.
    - Then it will return the eth and CDT amount.

-------------------------------------------------------------------------------------------------


function getAmountOfTokens( 
    uint256 inputAmount, 
    uint256 inputReserve, 
    uint256 outputReserve
) public pure returns (uint256) {
    require(inputReserve > 0 && outputReserve > 0, "Invalid Reserves");  // Check and make sure that there are reserves.

    uint256 inputAmountWithFee = inputAmount * 99; 
    uint256 numerator = inputAmountWithFee * outputReserve; // numerator is the input with the fee times the output Reserve
    uint256 denominator = (inputReserve * 100) + inputAmountWithFee;
    return numerator / denominator;

---------------------------------------------------------------------------------------------------------------------------------

This function is used to calculate the amount of tokens to be received from swaping two tokens.
    - This uses the x*y=k formula, and takes out a 1% fee that is distributed to the liquidity providers.
    - Requires that both of the reserves have tokens in them before running the function.
    
- Since solidity doesn't have decimal functionality, so in order to take out the fee for the user, we have to multiply the input amount (x99, then divide by 100) to 
    get the input amount with the fee. (inputAmountWithFee).

- Another thing to note is this function is a part a multilayered system, and the general flow of the function is below.

General Flow: || Pertaining to the [tokensToBeReceivedAfterSwap] RH /  index.js/_getAmountOfTokensToBeReceivedAfterSwap() -> utils/swap.js/getAmountOfTokensReceivedFromSwap() -> contract.getAmountOfTokens() ||
    - How the system works is that, the user enters in the amount of which tokens that they want to swap, and the app will calculate the amount of tokens that they will
        get in return.
        - Then when the person hits enter, two things happen, 
            - It updates the value entered to the react hook sustaining the value.
            - It calls the _getAmountOfTokensToBeReceivedAfterSwap() function with the value entered as an argument.
                - Then the _getAmountOfTokensToBeReceivedAfterSwap function takes the RH swapAmount value,
                    Gets the reserve amounts, and gets the value returned from the utility (swap.js) function getAmountOfTokensReceivedFromSwap and sets the value to the setTokensToBeReceivedAfterSwap RH.
                        - the Utility function takes the values and based upon if EthSelected is true, it will input the values to the contract.getAmountOfTokens function, which will calculate how much tokens
                            - the user will receive after the swap, according to the x*y=k formula with the fee taken out. 
                    - The tokensToBeReceivedAfterSwap RH's value is used as an argument in the _swapTokens function as well as the displaying what tokens the user will receive for their swap (before confirmation).

-------------------------------------------------------------------------------------------------

function ethToCryptoDevToken(uint _minTokens) public payable { 
    
        uint256 tokenReserve = getReserve(); 
        uint256 tokensBought = getAmountOfTokens( // Assign a variable to the returned value of xy=k ratio with the fee taken out.
            msg.value,
            address(this).balance - msg.value,
            tokenReserve
        ); // Get the proper amount of tokens after the fee and following the xy=k formula. If 10 will return 9.80.

        require(tokensBought >= _minTokens, "Insufficient output amount"); // Make sure that the amount to be purchased is bigger than the minimum amount.
        ERC20(cryptoDevTokenAddress).transfer(msg.sender, tokensBought);  // Transfer the amount of tokens bought to the user address.
    }


----------------------------------------------------------------

- This function is the ethToCDT swap function.

It takes in the the tokenReserve, and calls the getAmountOfTokens function, which gets the correct amount of tokens 
            

