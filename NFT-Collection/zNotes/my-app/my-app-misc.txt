---------------------------------------------------------------------------------------------------------------------------------------

This is my notes for Everything on the application side for the NFT Collection project with LW3

---------------------------------------------------------------------------------------------------------------------------------------

my-app/constants/index.js

This file is used to assign variables to values that are used for instantiating
contracts.

It assigns values to 

    - NFT Contract address.
        - The deployed NFT contract address on Rinkeby Testnet.
    - NFT contract abi.
        - The Contract abi
            - Application Binary Interface.
            - In order for an application to use an ethereum contract
                it needs to know the location, the structrue of the contract and
                what functions there are and what settings they have.
            - The ABI provides all of information to the web application for use.

both of these are crucial for instantiating new contracts in our index.js file.



---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------

pages/api/[tokenId].js

This is the API file will allow OpenSea to display our NFT's Metadata(name, image, description, tokenId).

OpenSea has metadata standards for NFTs, which you can view here:
https://docs.opensea.io/docs/metadata-standards

Basically what we're trying to accomplish here is that when OpenSea sends a request to our API we send back a
response.

We send the tokenId, the name of the NFT, the description of the nft collection, and the image url.


export default function handler(req, res) {
    - This is the declaration of the handler, and we have two parameters
        - Request, and response.
    const tokenId = req.query.tokenId;
    - Reponse: tokenId = req.query.tokenId
    const name = 'Crypto Dev #';
    - Token name(number)
    const description = "CryptoDevs is an NFT collection for Web3 Developers."
    - NFT collection description.
    const imageURL = 'https://n-nft-collection-ailfad3ah-nslee333.vercel.app/api/'
    - the Image url where OpenSea will get our image from our deployed vercel application.

- With this code we're defining our variables which we'll use in our API response.

return res.json({
    - Returning a reponse in the Json data format.
    name: name + tokenId,
    - name: name ('Crypto Dev #') + tokenId ('1') = 'Crypto Dev #1'.
        - name: 'Crypto Dev #1'
    description: description,
    - description: 'CryptoDevs is an NFT collection for Web3 Developers.'
    image: imageURL + tokenId + '.svg',
    - image: imageURL ('VercelURL/api/') + tokenId('1') + '.svg'.
        - image: "https://n-nft-collection-ailfad3ah-nslee333.vercel.app/api/1.svg"
});

This is our response json. When we deploy our vercel application so that OpenSea can
    access our metadata and when we view our minted NFT we can see all the metadata displayed in OS.

Another thing to note is our file name.

[tokenId].js 

This is a dynamic route provided by next.js.

A dynamic route means that we can name the api page with a path parameter

So what that means is that when a user requests the url/api/[1].js

In the request, req.query will equal to the string passed in by the user like above.

So if we passed in url/api/idiot

then it will return:

Crypto Dev # Idiot
Description ...
imageurl/idiot.svg

So whatever we pass in, it will return a json response containing our parameters,
    which is really usefull since we don't want to go and define all 20 different metadata
    pages for all 20 NFTs, can you imagine if we did that for larger projects like 5,000
    or even 10,000 nfts??? 

Here's more of my notes from the tutorial:


Dynamic APIs NEXT.js - 

In order to start a dynamic API route you name the API in square brackets under ../api/[yourVar].js.

It runs on the folder structure system, any files inside pages/api/* will create API endpoints like
/api/*. It works similar to how files and folders under the pages folder map to web page URLs.

Endpoint is the URL that is exposed by the API that receives requests and sends out responses.

The image url needs to be a publically accessable in order
for OpenSea to see it and use it.


---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------

