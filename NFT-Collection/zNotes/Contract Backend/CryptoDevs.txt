-------------------------------------------------------------

This is the code walkthrough of the CryptoDevs.sol contract.

--------------------------------------------------------------
--------------------------------------------------------------

The Structure of the contract:

1. SPDX Id.
2. Solidity version declaration.
3. Import Statements.
    - OZ ERC721Enumerable.sol,
    - OZ Ownable.sol.
    - ./IWhitelist.sol
4. Contract declaration.
    4.1 - State variables.
    4.2 - constructor.
    4.3 - startPresale().
    4.4 - presaleMint().
    4.5 - mint().
    4.6 - _baseURI().

--------------------------------------------------------------
--------------------------------------------------------------

import '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';
import '@openzeppelin/contracts/access/Ownable.sol';
import './IWhitelist.sol';

- This is importing several OpenZeppelin contracts that we'll
    be using.
    - ERC721Enumerable.sol
        - This will be used to numeber and track our NFTs.
    - Ownable.sol 
        - This file will help us renounce the ownership
            of the NFT contract which is a common practice
            when deploying decentralized projects.
    - IWhitelist.sol
        - This file will help us interface with the Whitelist
            contract so that we can see who is in the 
            whitelist giving him/her access to the presale
            period.
--------------------------------------------------------------

contract CryptoDevs is ERC721Enumerable, Ownable {

- This is the contract declaration, and it is inheriting
    from the ERC721Enumerable.sol and Ownable.sol contracts.

--------------------------------------------------------------

string _baseTokenURI; 2
IWhitelist whitelist; 3


constructor(string memory _baseURI, address whitelistContract) ERC721("Crypto Devs", "CD") { 1
    _baseTokenURI = _baseURI; 2
    whitelist = IWhitelist(whitelistContract); 3
 }

--------------------------------------------------------------

Function overview:

1. constructor function.
    - Takes two arguments.
        - _baseURI.
        - whitelistContract.
    Initialization of OZs ERC721 contract. We pass in these arguments to its constructor.
        - Name of the Token ("Crypto Devs").
        - Symbol of the NFT ("CD").
2. Assigning the passed in value of _baseURI to _baseTokenURI state variable.
3. Assiging the passed in value of IWhitelist(interface with whitelistContract) to the state variable.

--------------------------------------------------------------
    
Notes on the function:

- When we first deploy this contract, we'll:
    - pass in these arguments to the constructor and it will Assign the values to state variables 
        and it will initialize the ERC721 contract with the passed in arguments of 'Crypto Devs' 
        and "CD".
- URI:
    - URI stands for Uniform Resource Identifier.
    - URI is used to identify abstract or physical resources on the internet.
        - In this instance we're using the URI as essentially a URL to go and find the meta
            data for that NFT Token.
        - It dosen't have to be a URL, it can be used with IPFS, RV etc.
        - For simplicity we'll use it as a base path to attach the Metadata about that NFT.
            - The metadata for this NFT token will be:
                - TokenID, Attributes of the NFT.
- IWhitelist(whitelistContract) 
    - IWhitelist interface is wrapping the whitelistContract, when we do this it is creating an instance 
        of the whitelistContract function whitelistedAddresses for our use.
        - And we're assigning a variable (whitelist) to that instance for our use.

- Interface definition: 
    - In computing, an interface is a shared boundary across which two or more seperate components of a computer
        system exchange information.
            - The exchange can be between software and hardware etc.
    - In this case, we're interfacing (a connection between) the whitelist.sol and
        our own CryptoDevs.sol file.
            - And we're creating an instance of the contract just with whitelistedAddresses function, 
                so that in the presale period, we can see if the address attempting 
                to make a transaction is in the whitelist or not.

--------------------------------------------------------------
--------------------------------------------------------------    

bool public presaleStarted; 1

uint256 public presaleEnded; 2


function startPresale() public onlyOwner { 
    presaleStarted = true; 1
    presaleEnded = block.timestamp + 5 minutes; 2
}
--------------------------------------------------------------

Function overview:
1. Start the presale.
2. End the presale after 5 minutes has passed.

--------------------------------------------------------------

Function notes:

- This function is pretty straight forward, it is a
        function that only the Owner of the contract can use.
            - onlyOwner is a function modifier that is inherited from
                OZ's Ownable.sol contract - and it requires that the 
                owner == msg.sender(the address that is starting the transaction).

--------------------------------------------------------------

uint256 public maxTokenIds = 20; 3
    
uint256 public tokenIds; 3

uint256 public _price = 0.01 ether; 4


function presaleMint() public payable {
    require(presaleStarted && block.timestamp < presaleEnded, "Presale ended"); 1
    require(whitelist.whitelistedAddresses(msg.sender), "You're not in the whitelist"); 2
    require(tokenIds < maxTokenIds, "Exceeded the limit); 3
    require(msg.value >= _price, "Ether sent is not correct"); 4

    tokenIds += 1; 5

    _safeMint(msg.sender, tokenIds); 6
}

--------------------------------------------------------------

Function overview:

1. Require that the presale has started, and that the presale has not ended.
2. Require that the address initiating the transaction is in the whitelist.
3. Require that the maximum amount of NFTs haven't been minted yet.
4. Require that the ether sent with the transaction is greater than or equal to the price of the NFT.
5. Add 1 to the total token count.
6. Mint an NFT.
    - Enter the address and the token count as arguments.



--------------------------------------------------------------

Function notes:
    - If this is the first NFT minted,
        TokenIds count = 0.
            presaleMint()
                tokenIds += 1;
            _safeMint(msg.sender, tokenIds(1))
                - Because you add 1, it is assigned the tokenId of #1.

require(presaleStarted && block.timestamp < presaleEnded, "Presale ended"); 1
    
    - && in solidity
        - (logical AND).
            - If both operands are non-zero, then the condition becomes true.
            In this case:
    
require(presaleStarted (= true) AND Block.timestamp < (is less than) presaleEnded (start + 5 minutes) ( = true),"Presale Ended");
    --------- TRUE (1) -----|||----------------------------------TRUE (1)----------------------
    --------------------------------------------------TRUE(1)------------------------------------------------||||----FALSE(Send Message)




--------------------------------------------------------------

function mint() public payable {
    require(presaleStarted && block.timestamp >= presaleEnded, "Presale has not ended yet"); 1
    require(tokenIds < maxTokenIds, "Exceeded the limit"); 2
    require(msg.value >= _price, "Ether sent is not correct"); 3


    tokenIds += 1; 4

    _safeMint(msg.sender, tokenIds); 5
}

--------------------------------------------------------------

Function Overview:

1. Require that the Presale has started, AND that the presale has ended in order to mint.
2. Require that the amount of tokenIds does not exceed maxTokenIds.
3. Require that the amount sent with the message is greater than or equal to the _price.
4. Everytime a token is minted, add one to the count of tokens.
5. Mint the token using the OZ ERC-721 _safeMint function.

--------------------------------------------------------------

Function notes:


require(presaleStarted && block.timestamp >= presaleEnded, "Presale has not ended yet"); 1
    - Require that:
        - presaleStarted = true AND the block.timestamp is greater than or equal to presaleEnded 
            - presaleEnded --> block.timestamp (at time of presale start + 5 minutes).
            - block.timestamp time has to be greater than the presaleEnded in order for mint() to work
                after the presale has ended.


--------------------------------------------------------------

function _baseURI() internal view override returns (string memory) {
    return _baseTokenURI; 
}

--------------------------------------------------------------


Function notes:

- This _baseURI function is a function in the OZ ERC-721 contract that
    we'll override because it returns an empty string insted of the
    _baseTokenURI.
- Virtual / Override
    These are inheritence Statements,
        - virtual means that if a function has this keyword in
            its declaration, it may be overridden by a child contract.
        - Override means that if a function has this keyword in its
            declaration, it is overriding the parent contracts function,
                and modifying it for our own purpose.
- OZ has designed it so that any person can modify this function so that
    they can tailor the return variable to their needs.

--------------------------------------------------------------

function withdraw() public onlyOwner { 1
    address owner = owner(); 2
    uint256 amount = address(this).balance; 3
    (bool sent, ) = _owner.call{value: amount}(""); 4
    require(sent, "Failed to send ether.") 5
}

--------------------------------------------------------------

Function overview:
1. Function declaration, require that only the owner can call this function.
2.  
3. Assigning a variable to the balance of this contract.
4.

READ THIS!!!!! WAS IN THE MIDDLE OF FUNCTION OVERVIEW WHEN I STOPPED.


--------------------------------------------------------------

Function notes:



































--------------------------------------------------------------

receive() external payable {}

fallback() external payable {}

--------------------------------------------------------------

Function overview:









---------------------------------------------------------------

Function notes:

- You need to have both Receive and Fallback functions in
    order to recieve any ether with your contract.
    - receive() is called when msg.data is empty, 
        - basically if you send ether without any message.
    - fallback() is called when your msg.data is not
        empty then you need this fallback function.
        
        
---------------------------------------------------------------


















